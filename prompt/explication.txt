PARSE_MAP

1. Déclaration des variables :
   char    *line;      // Pour stocker chaque ligne lue avec get_next_line
   char    *temp_map;  // Pour stocker toute la map en une seule chaîne
   char    *temp;      // Variable temporaire pour la gestion de la mémoire
   int     max_width;  // Pour garder la largeur maximale de la map

2. Initialisation (lignes 10-12) :
   temp_map = NULL;    // Initialisation du buffer de la map
   max_width = 0;      // Initialisation de la largeur max
   game->map.height = 0; // Initialisation de la hauteur

3. Boucle de lecture (lignes 14-28) :
   while ((line = get_next_line(fd)) != NULL)
   {
      - Vérifie si la ligne actuelle est plus longue que max_width
      - Utilise ft_strjoin pour ajouter la ligne à temp_map
      - Libère l'ancienne version de temp_map via temp
      - Incrémente la hauteur de la map
      - Libère la ligne lue
   }

4. Allocation de la grille (lignes 29-32) :
   - Alloue un tableau de pointeurs pour stocker les lignes
   - Vérifie si l'allocation a réussi

5. Création de la grille (lignes 33-39) :
   - Utilise ft_split pour séparer temp_map en lignes individuelles
   - Vérifie si le split a réussi
   - Gère les erreurs potentielles

6. Nettoyage (lignes 40-41) :
   - Libère temp_map qui n'est plus nécessaire

7. Validation (lignes 42-48) :
   - Appelle check_map_chars pour vérifier les caractères
   - Gère les erreurs si des caractères invalides sont trouvés

8. Retour (ligne 49) :
   - Retourne 1 si tout s'est bien passé, 0 sinon

POINTS IMPORTANTS :
- La fonction gère la mémoire de manière sécurisée
- Elle vérifie toutes les allocations
- Elle nettoie en cas d'erreur
- Elle stocke les dimensions de la map

ERREURS GÉRÉES :
- Échec d'allocation mémoire
- Caractères invalides dans la map
- Problèmes de lecture du fichier
